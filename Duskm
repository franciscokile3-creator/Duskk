-- DUSK AIM ASSIST (Rayfield UI Edition, Clean Version)
-- Targets low HP players first; no HP blocker.

-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- // Config
local TARGET_ANIM_NUMERIC = "77894750279891"
local Enabled = false
local Smoothness = 0.2
local PreferLowHP = false
local HPThreshold = 30

-- // Load Rayfield
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- // Create Rayfield Window
local Window = Rayfield:CreateWindow({
	Name = "Dusk Aim Assist",
	LoadingTitle = "Forsaken Utility",
	LoadingSubtitle = "by Dusk",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "Forsaken",
		FileName = "DuskAimAssist"
	},
	KeySystem = false,
})

-- // Tabs
local MainTab = Window:CreateTab("Main", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)

-- // Enable Toggle
MainTab:CreateToggle({
	Name = "Enable Aim Assist",
	CurrentValue = false,
	Flag = "AimAssistToggle",
	Callback = function(Value)
		Enabled = Value
	end,
})

-- // Load GUI Button
MainTab:CreateButton({
	Name = "Load Forsaken GUI",
	Callback = function()
		loadstring(game:HttpGet("https://rawscripts.net/raw/Forsaken-c00lgui-v15-ESP-EDITABLE-STAMINA-41624"))()
	end,
})

-- // Smoothness Dropdown
SettingsTab:CreateDropdown({
	Name = "Smoothness",
	Options = {"Low", "Medium", "High"},
	CurrentOption = {"Medium"},
	Flag = "SmoothOption",
	Callback = function(Option)
		local choice = Option[1]
		if choice == "Low" then
			Smoothness = 0.08
		elseif choice == "Medium" then
			Smoothness = 0.2
		else
			Smoothness = 0.4
		end
	end,
})

-- // Prefer Low HP Toggle
SettingsTab:CreateToggle({
	Name = "Prefer Low HP Targets",
	CurrentValue = false,
	Flag = "PreferLowHP",
	Callback = function(Value)
		PreferLowHP = Value
	end,
})

-- // HP Threshold Slider
SettingsTab:CreateSlider({
	Name = "HP Threshold",
	Range = {0, 200},
	Increment = 1,
	Suffix = "HP",
	CurrentValue = 30,
	Flag = "HPThreshold",
	Callback = function(Value)
		HPThreshold = Value
	end,
})

-- // Helper Functions
local function getNearestPlayer()
	local nearest, distance = nil, math.huge
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local root = player.Character.HumanoidRootPart
			local dist = (root.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
			if dist < distance then
				distance = dist
				nearest = root
			end
		end
	end
	return nearest
end

local function getLowestHPPlayer()
	local lowest, lowestHP = nil, math.huge
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
			local hum = player.Character:FindFirstChildOfClass("Humanoid")
			local root = player.Character:FindFirstChild("HumanoidRootPart")
			if hum and root and hum.Health > 0 and hum.Health <= HPThreshold then
				if hum.Health < lowestHP then
					lowestHP = hum.Health
					lowest = root
				end
			end
		end
	end
	return lowest
end

local function isTargetAnimationPlaying()
	for _, player in pairs(Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
			for _, anim in pairs(player.Character.Humanoid:GetPlayingAnimationTracks()) do
				if anim.Animation and anim.Animation.AnimationId:find(TARGET_ANIM_NUMERIC) then
					return true
				end
			end
		end
	end
	return false
end

-- // Main Aim Loop
RunService.RenderStepped:Connect(function()
	if not Enabled then return end
	if not isTargetAnimationPlaying() then return end

	local target
	if PreferLowHP then
		target = getLowestHPPlayer()
	end
	if not target then
		target = getNearestPlayer()
	end

	if target then
		local aimPos = target.Position
		local camCFrame = Camera.CFrame
		local direction = (aimPos - camCFrame.Position).Unit
		Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(camCFrame.Position, camCFrame.Position + direction), Smoothness)
	end
end)
